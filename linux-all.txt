instance fields:
1)instance name
2)instance id
3)instance state
4)instance type
5)status check
6)alarm status
7)availability zones
8)public ipv4 dns
9)public ipv4 address
10)elastic ip
11)ipv6 ips
12)monitoring
13)security group name
14)key name
15)launch time
<==================================================>
1)Linux is multi user and multi tasking operating system.
2)Linux is open source and free cost.
3)hierarchical file system.
4)more security available.
5)Linux architecture:
   hardware-->kernel-->shell-->applications or utilities.
   hardware: 1st priority is hardware. you cannot install any operating system without hardware.
==>kernel:
----------
   it is heart of the Linux operating system.
   schedule tasks.
   manage resources.
   security level control available.
==>shell:
--------
   it is user interface.
   we have different type shells.
   1)Korn shell 2)bourn shell 3)c shell 4)posix shell 5) bash
   applications or utilities:
   perform applications.
6)root user have all privileges.
7)in Linux file permission:
    it having start d it is directory.
    start with - it is file.
    start l(small l) it is linked file. 
10) / is root and high level directory (like windows local disk(c)).
11) /home= is other users home directory.
12) / =is root user home directory.
13) /boot= bootable files location, kernel, grub information available.
14) /etc= it is configuration files location like package install.
15) /opt= optional directory, third party software install like tomcat, Jenkins, git.
16) /usr= default software install location.
17) /lib= it contain library files and execute files.
18) /var= system perform every log print here.
19) /bin= normal users running commands store.
20) /sbin= root user running commands store.
21) /dev=it contains the device files.
22) /proc= it have processing files, system configuration files like cpu information.
23) /media= it contain removable device like pen drive, cd, hard disk. 
24) /mnt= default mount point in partition.
25) by using touch command we can create n number of empty files and create at a time also.
===================================================================================================
1)to see who is login #whoami
2)see server time #date
3)switch to root user #sudo su or sudo -i  (sudo su= go to last use path , sudo -i= go to home directory)
4) to see all files and directories #ls or #ll
5)to see present working directory or path #pwd
6)clear screen #clear (or) ctrl+l
7)system running time see #uptime
8)to see operating system #cat /etc/redhat-release
9)to see terminal history #history
10)create empty file #touch filename
11)create multi empty files #touch f1 f2 f3 f4 f5
12)create file with content #cat > filename (enter write data and press ctrl+d)
13)to see file content #cat filename
14)add new content add with old file content also #cat >> old-filename
15)create directory #mkdir directory-name (create multi directory at a time d1 d2 d3 d4)
16)enter into directory #cd directory-name
17)copy file #cp filename destination-path
18)copy all files in one directory to another directory #cp -r directoryname1 directorymame2

==================================================================================================================
key points:
   1)delete instance =select instance-->instance state-->stop instance.
   2)any configuration file edit time 1st take backup next edit it.
====================================================================================================================

note:
------
 vi(visual display editor) command:
---------
1)it is 3 modes: command mode, insert mode, extended command mode.
2)go to insert mode =press i
3)we can write n number of lines data
4)go to extended commandd mode =esc
5)save file and quit =esc+:wq!
6)quit without saving=esc+:q!
7)save without quit= esc+:w
8)copy cursor line =esc+yy
9)copy number of lines =esc+numer+yy
10)delete cursor line =esc+dd
11)delete no of lines= esc+number+dd
12)go to last line=esc+G
13)go to 1st line =esc+gg
14)move coursor word by word =esc+w
15)back to word by word=esc+b
16)undo=esc+u
17)cursor move line last to 1st=esc+I
18)insert new line cursor below=esc+o
19)insert new line cursor above=esc+O
20)set line numbers=esc+:se nu
21)remove line numbers=esc+:nonu
22)paste line cursor above =esc+p
23)paste line cursor below=esc+P
24)search one string(word)=esc+/word
25)go to particular line like 28 or 30= esc+:line number

=====================================================================================
ls command:
----------
1)to see files and directories #ls 
2)to see long list #ll (or)#ls -l
3)see particular file information #ll filename
4)to see hidden files #ls -la
5)check single directory details #ls ld directory
6)to see directory files without enter #ll directory-name
7)see particular letter all files #ls -l c*
8)to see files size in human understandable language #ls -sh

cpu info:
--------
1)to see space #free -m (mb) or -g (gb)
2)cpu info #cat /proc/meminfo (or) #cat /proc/cpuinfo  


cmds:
----
1)copy file in source path to destination path #cp source path destination path
2)command details see #man command (ex: #man cp) (use q to quit)
3)move file #mv filename destination path
4)rename a file or directory #mv old-filename new-filename
5)delete file #rm filename
6)delete file or directory forcefully #rm -rf filename (delete also multi files #rm -rf f1 f2f3)
7)delete  empty directory #rmdir directory-name
8)create file with data #vi filename
9)create file with data #nano filename (exit use x)
10)open multi files use vi editor #vi -o filename1 filename2
11)create hidden file #touch .filename

keypoints:
----------
1)hidden files start with .(dot)
2)*= * means all
3)-f= means force fully
4)copy content just select data 
5)for paste just right click on cursor
6)change instance ip type=select instance-->security-->security group below link-->edit inbound rules-->custom/my ip/any-ware
7)Linux support all type file extensions.
8)terminal cursor stuck time use =ctrl+c (or) ctrl+z
9)cloud engineer daily task =monitoring, Linux issues, cloud issues, tickets solve.
10)putty gen is useful to convert pem file to ppk file.
11)history store in terminal used commands and do not save in file data or commands.
12)aws=aws amazon web service it is public cloud service
======================================================================================================================================

commands:
--------
1)print file first 10 lines #head filename(#head rao)
2)print no of lines in a file #head -number filename (#head -32 rao)
3)print last 10 lines of a file #tail filename(#tail rao)
4)print no lines in a file #tail -number filename(#tail -42 rao)
5)to see floating in a file(like printing log)#tail -f filename(come out ctrl+z)
6)install Apache package #yum install httpd
7)start service Apache #service httpd start
8)to see file data line by line #less filename(come out use =q)
9)to see file data in page wise #more filename(go to next page=d, go to previous page use=b, search word=/word ,open to vi editor press=v)
10)to see data in alphabetical order #sort filename(reverse order #sort -r filename)
11)delete duplicate(same words) lines remove #sort -u filename
12)to search particular word lines based #cat filename | grep "word"
13)to see word before 5 lines #grep -B5 "word" filename
14)to see after 5 lines in a string #grep -A5 "word" filename
15)to see with case sensitive base #cat filename | grep -i "string"
16)print single word #cat filename | grep -o "word" (or) #grep word
17)no of same words count  #grep -c "word" filename 
18)word match line number #grep -n "word" filename
19)print other lines of string #grep -v "word" filename
20)search 2 words match a file #grep "word1\|word2" filename
21)search files in current directory #find . -name filename
22)search files #find path -name filename
23)search in root file system #find / -name filename
24)search files in case sensitive time #find path -iname filename
25) search directory's #find path -type d -name directory-name
26)print .conf extension all files #find path -type f -name "*.conf"
27) search files in permissions based #find path -type f -perm file-permissions
28) permissions not match files #find path f ! -perm file-permissions
29)change file permissions using find #find path -type f -perm old-permissions -exec chmod new-permissions {} \; 
30)change directory permissions using find #find path -type d -perm old-permissions -exec chmod new-permissions {} \;
31)delete files use find cmd #find path -type f -name "filename" -exec rm -rf {} \;
32)find empty files #find path -type f -empty
33)last 15 days not modified files #find path -mtime days
34)modify last 30 to 100 days between files #find path -mtime +30 -mtime -100
35) see last 60 minutes modify files #find path -cmin -60 (60=minutes)
36)how to see files size based #find path -size +30M

notes:
------
-->filter commands: head, tail, less, more ,sort.
-->come out to log use ctl+c
-->grep=global regular expression
-->exit man page press=q
-->to identify the file location in our system or server we use find command.


key points:
----------
1) nginx default file path location= usr/share/nginx/html
2) Apache default path is= var/www/html
============================================================================================================================
cmannds:
-------
1) Set file permissions 751(rwx r-x --x) #chmod 751 filename
2) Set full permissions in a file= #chmod 777 filename
3) Set file permissions 017= #chmod 017 filename
4) Set directory permissions 426 = #chmod 426 directory name
5) To see umask value #umask
6) One step back to directory #cd .. (two stpes back from directory #ce ../..)
7) Change directory permissions and change also inside files permissions #chmod -R 775 directory-name
8) Come back to home directory #cd
9) Go to previous directory #cd-
10) Set file permissions change only user permissons #chmod u=rwx filename
11) To see file permissions #ll (or)#ls -l
12) Remove execute permissions to others #chmod o-x filename
13) Remove all permissions #chmod 000 filename
14) Change umask value #umask newumaskvalue (#umask 044)(default umask value is 022)
15) Change user #chown new username filename
15) Change group #chown :new group name filename(group change time use : before group name) 
16) Change user and group #chown username:groupname filename
17) To check change time one notification #chown -v username:groupname filename
18) When change time only to see #chown -c username:groupname filename
19) Change directory #chown user:group directory name
20) Change ownership directory and inside files also #chown -R username:groupname directory-name
21) User add #useradd username
22) Group add #groupadd groupname

note:
-----
file permissions:
==>we have 3 type permissions
==>-/d/l/2 rwxrwxrwx 1 root root 0 dec 2 02:46 1
==>-=file or d=directory or l=linked file or 2=hardlink
==>rwxrwxrwx=file permissions
==>1/2 = 1=linkfiles 2=hard link
==>root=owner
==>root=group
==>0=file size
==>dec 2 02:46=last modified date and time
==>filename=filename
==>rwx=user/owner level
==>rwx=group level
==>rwx=others
==>r=read=4(numerical)
==>r=read=r(alphabetical)
==>w=write=2(numerical)
==>w=write=w(alphabetical)
==>x=execute=1(numerical)
==>x=execute=x(alphabetical)
==>---|---|--- = no permissions
==>other|group|others
==>change file permissions use command #chmod
==>default file permissions=644
==>default directory permissions=755
==>default umask value=022
==>777=full permissions in a file
==>u=user g=group o=other
==>file and directory permissions set by based umask value based 
==> +=add permissons -=removing, = =set or remove or equal
==>ex: chmod u+x filename
==>ex:chmod u=rw filename
==>ex:chmod u=rwx,g=r,o=r filename
==>set file permissions user and group and others have read permissions #chmod ugo=r filename 
==>ex:#chmod o-x filename
umask:
==>umask decide the file permissions we can change umask value in umask last 3 digits we consider it.
==>ex: file=666
      umsak=022
     =----------
           =644
==>umask value use when we create new file or directory create time
==>
chown:
==>chown is used to change ownership
==>default owners of user and group is root
==>the owner is taken only in system users other wise 1st create user next change it.
==>crontab is nothing but a job scheduler.
=================================================================================================================
cmds:
-----
==>stickbit:
------------
==>useradd #rao
==>useradd #sri
==> #useradd -u 600 -g 555 -G 551 -d /Krishna -m -s /bin/bash -c raouser -e 03/30/2024 -f 3 pilla 
==>create directory #mkdir krishna
==>give full permissions Krishna directory #chmod 777 krishna
==>switch to user rao #su rao
==>go to Krishna directory #cd Krishna
==>create file #touch file1
==>create file #touch file2
==>come out rao user #exit
==>switch to user sri #su sri
==>go to Krishna directory #cd Krishna
==>create files #touch anotherfile1 anotherfile2
==>to see files #ll
==>remove rao user file #rm -rf file1
==>come out sri user #exit
==>switch to rao user #su rao
==>go to krishna directory #cd krishna
==>remove sri user file#rm -rf another file
==>come out to rao user #exit
==>apply stickbit krishna directory #chmod o+t welcome
==>see files #ll
==>switch to rao #su rao
==>go to krishna directory #cd krishana
==>remove sri files #rm -rf anotherfile2 (u get error because apply stickybit)
==>back to home directory #cd
==>come back to root user#exit
==>switch sri user #su sri
==>enter into krishna directory #cd krishna
==>remove rao user files #rm -rf file2 (u get error because apply stickybit)
==>change file permissions rao user file #chmod 777 file2 ((u get error because apply sticky bit))
==>delete sri user file #rm -rf anotherfile2
==>exit from sri user #exit
==>remove sticky bit remove #chmod o-t krishna
==>see stick bit apply are not #ll
==>create file #touch ram
==>apply stickybit in ram file #chmod o+t ram
==>remove stickbit in ram file #chmod o-t ram
==>soft linlk & hard link:
==>check file system #df -h
==>check inode numbers #df -i partion name(/dev/xvda2)   
==>to see file&directorys inode numbrs #ls -i file/dir name
==>create directory #mkdir raja
==>create file #vi raja (write data close)
==>see data #cat raja
==>create soft link# ln -s filename(raja) linkname(raja.link)
==>see files #ll
==>see link file data #cat linkname(raja.link)
==>create file #touch koti
==>create hard link #ln filename(koti) link name(koti.link)
alias:
==>to see alias in your system #alias


note:
-----
==>you have full permissions in file but you cannot delete files because it apply stickybit.
==>when we apply stickbit that file can delete only root user and owner of the file.
==>by default apply stickbit directory=/tmp
==>by default 777 permisssins directory=/tmp
==>stickybit we can apply both files and directories
==>soft link like a shortcut file
==>soft link have different inode number
==>hard link have same inode number
==>inode is some details of file
==>inode have the data=user id, group id, soft links, hard links, locations ...etc.
==>you rename time inode number can not change
==>inode numers is full you can not create new files.
==>when inode is full delete un used files. 
==> you can not increase or decrease the inode number.
==>inode  contains the meta data of a file.
==>every file and every directory have inode number.
==>when take hard link hard link have same inode number.
==>delete soft link original file you lose the data.
==>delete soft link file we can have the data in our original file data.
==>delete hard link original file you have the data until last link delete.
==>original file data upadte it can update automatic also softlink file.
==>softlink file data update it also update data automatically in original file.
==>original file data upadte it can update automatic also hardlink file.
==>hardlink file data update it also update data automatically in original file.
==>hard link use for data sync.
==>in hard link time change file permissions can change both link and original files permissions.
==>soft link original file permissions can change only.
==>alias syntax= #alias name="full command"
==>ex:#alias rr="ln -s filename link name"
==>alias command is user to user different.
==>apply all users enter permeant in .bashrc file
==>when .bashrc file modify time use this cmd to update(#sourc .bashrc)
==>remove alias use #unalias coomand(#unalias name="fullcommand")

==============================================================================================================================

commands:
---------
==>create user #useradd username 
==>create user #adduser username
==>show users list create or not #cat /etc/passwd
==>login to user #su username
==>useradd command takes default values see #cat /etc/default/useradd
==>see only one user details #cat /etc/passwd | grep "ubuntu"
==>create user with define values #useradd username -u userid(1010) -g default(1010) -d homedirectory(/home/username) -c "comment"(devtem) 
==>user id group id max min, password, details see file #cat /etc/login.defs
==>to see available shells #cat /etc/shells
==>user don't login to shell #usermod -s /sbin/nologin username
==>apply (or)change password one user #passwd username
==>password information see# cat /etc/shadow
==>lock user #usermod -L username
==>unlock user #usermod -U username
==>to see file lock or not #cat /etc/shadow (it lock the password field ! symbol) 
==> see change felids #chage
==>change fields change field #chage username
==>check particular user information #chage -l username
==>change user name(when server is active time)#usermod -l newusername oldusername
==>check user modification details #cat /etc/passwd
==>delete user #userdel username
==>delete user with user files also #userdel -r username
==>to see groups and id #cat /etc/group
==>add user primary group #usermod -g group name username 
==>add user secondary group #useermod -G groupname username
==>to see user how many groups# id username
==>change shell #usermod -s shell(/bin/bash) username 

notes:
------
==>when we create a user the user information store in /home(cd /home/ec2-user(username)-->ls -ltrah)
==>root user= user id =0 ,group id=0,user&group=root,shell=/bin/bash
==>adduser is much friendly
==>when we create user files store in /etc/passwd file store
==>when we create new user it create some files these files=.bashrc , .bash_profile , .bash_logout, .. , .
==>.bashrc=terminal config data ex:alias
==>.bash_profile=profile history
==>.bash_logout=logout history
==>when user login to see one comment write in #cd /opt/skell -->vi ra (write data)(this file locate in new user home directory)
==>cat /etc/passwd fields:
	it have total 7 fileds
	1)user name  ex:sri
	2)user passwd ex:rao(its cannot see it is encrepted)
	3)user id ex:1003
	4)group id ex:1003
	5)comment  ex:linuc user
	6)home directory ex:/home/linux
	7)shell ex:/bin/bash
==>user add command takes default values in /etc/default/useradd
==>when you create new user with define values groupid can take only already exit groupid
==>cat /etc/shadow file fields:
	1)username
	2)password
	3)password last modify date
	4)minum days password not change
	5)max days password not change
	6) warning days password expaire
	7)inactive days after  expire
	8)expaire date
==>we can unlock and lock the user
==>password authentication change file(password authentication=yes)# vi /etc/ssh/sshd_config
   (restart the service #restart sshd.service)
==>group id is taken only already used groupid s only.
==>normal user forget the password the root user can assign the user password
   (go to root #passwd username)
==>go to skell directory #cd /etc/skel
==>you create files in skell directory the files available in new user home directory
==>

-------------------------------------------------------------
user administration:
--------------------
==>to see shells in your system #cat /etc/shells
==>password authentication change on because u login to the server #vi /etc/ssh/sshd_config

==>next restart it #service sshd restart

==>lock user #usermod -L username

==>unlock  #usermod -U username

==>to change or set user fields #chage username
  (maximamum password age
   minumum password age
   last paasword change
   password expair warning
   password inactive
   account expare )

==>delete user along with user files and directories #userdel -r username

==>when u forgot user passwd 
   first switch to root
   #passwd username 
   create new passwd

==>add single user in group #gpasswd -a username groupname
==>add administrator in a group #gpasswd -A username groupname
==>see group admin #cat /etc/gshadow

==>password user password authentication #vi /etc/ssh/sshd_config
==>next start service #service sshd restart


=====================================================================================================
cmds:
----
==>create group #groupadd -g 1200(groupid) groupname
==>see groups & group modify details #cat /etc/group
==>change group id #groupmod -g 1300(group id) groupname
==>change group name #groupmod -n new-groupname old-groupname
==>set group password #gpasswd groupname
==>to see group password set or not #cat /etc/gshadow
==>see group id and how many groups # id username
==>add secondary group in one user #usermod -G groupname username
==>add users in group #gpasswd -a username groupname
==>exiting user not remove add user #usermod -aG groupname username
==>add multiple users ina group #gpasswd -M user1,user2,user3,user4,user5 groupname
==>assign user as administrator #gpasswd -A username groupname
==>see group administrator assign or not #cat /etc/gshadow
==>delete user in a group# gpasswd -d username groupname
==>delete a group #groupdel groupname
==>to see sshd status #service sshd status

notes:
------
==>password details related use #cat /etc/gshadow
==>group related details see use #cat /etc/group
============================================================================================================
==>partition table is store in boot loader
==>the bootloader directory is available in =/bot
==>kernel is heart of the operating.
==>Grube executes the kernel.
==>systemd is the 1st process.
==>init levels is total 6.
==>when system is reboot the application is down so don't  reboot and shutdown.
==>system running time see(last shutdown time to till time) #uptime
==>single usermod use:
->root password forget time
->grup file corrupt time
->kernel file corrupt time
==>default runlevel in linux =init3
==>init 5 is gui
==>init 4 un used for feature purpose
==>init 6 reboot the system(imp:not use in job time live environment)
==>run levels have configuration files
==>in vm ware you have login single usermod.
==>in aws you dont have login single usermod.


commands:
==>check kernel version check #uname -r
==>check the which runlevel #who -r
===================================================================================================================
commands:
==>to check crone jobs list #crontab -l
==>create crone tab #crontab -e
-->ex: (52 1 * * * df -h > /tmp/disk.txt)
==>see crontab live running jobs #tail -f /var/log/cron
==>see every crone jobs #cd /var/spool/cron
==>stop crone jobs not working #service-name crond stop
==>start crone jobs #service-name crond start
==>particular user crone jobs #crontab -l -u username
==>delete all crontab #crontab -r
==>delete single crone tab # crontab -e (remove job here)
==>restrict some users crontab jobs #cat /etc/cron.deny (open this file use vi next write user name)



note:
==>the crone files available in /etc
==>every user have different cron jobs available.
==>to see cron tab fields #cat /etc/crontab
==>it have 5 fields 
-->1)minutes(0-60)
-->2)hours (take 0-23 hours time)
-->3)day of month(1-31)
-->4)month(1-12)
-->5)day of week(0-6 0=sunday)
==>crone log is available in #cd /var/log
==>check crone service #service crond status (is it active run the cron jobs is it stop cron jobs not run)
==>ex:crone jobs:
-->*/2 * * * * df -h > /tmp/disk.txt (run every 2 minutes in this cmd)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-->everyday morning 6.50 run script file
#vi crontab.sh
#!/bin/bash

df -h > /tmp/disk.txt
free -m > /tmp/meminfo.txt
cat /etc/redhat-release > /tpm/osinfo.txt
uname -a > /tmp/kernelinfo.txt
(close file :wq) 
give execute permissions #chmod +x cronetab.sh
run crone tab files #./cronetab.sh
see out put #cd /tmp
#ll
+++++++++++++++++++++++++++++++++++++++++
write cron job #crontab -e
 run 8.30evening every day 
 30 8 * * * /root/crontab.sh
+++++++++++++++++++++++++++++++++++
every 2.15 every month hours run cron job
#crontab -e
15 14 1 * * /root/crontab.sh
 +++++++++++++++++++++
monday to friday every morning 9.30
#cronetab -e 
30 9 * * 1-5 /root/crontab 
++++++++++++++++++++++++++++++++
12,18,30 run these days in 4.30 time
#cronetab -e
30 16 12,18,30 * * df -h > /tmp.txt
+++++++++++++++++++++++++++++++


+++++++++++++++++++++++++++++++++++++
==>crone jobs run based on server time
==>to see server time #date
==>allow crone job users vi /etc/cron.deny open the file and remove user name
==>create cron.allow file for allow users purpose at this time remove first cron.deny file
==>create cron.allow users file
==>#vi /etc/cron.allow (write user names)

=======================================================================================================

Alias :

      An alias lets you create a shortcut name for a command, file name or any shell text. By using aliases, you save a lot of time when doing 
tasks you do frequently. You can create a command alias.

    It is a shortcut command 

Aliases are two types temporary alias and permanent alias


Temporary alias : alias log="cat /etc/passwd"
                  alias log="tail -f /var/log/httpd/access_log"


Permanent alias : we are able to create peramant alias in .bashrc file, open that file and save alias.
                 
                 vi .bashrc                  (open this file)
                 alias log='cat /etc/passwd' (type the alias and save)

command should be different.

To know aliases :
                 type alias
To remove alias  :
                  syntax: unalias alias-name
                     ex : unalias log


 .bashrc file can accessed from ls -ltrah
==============================================================================================================================================
how to install mobistrem and connect aws instace:
-------------------------------------------------
==>open google
==>search mobasxterm download open link 
==>download install edition.
==>next open extract the file.
==>open in download location and install it.
==>open the mobaxterm
==>click session
==>ssh
==>remote host=ip
==>specify username=ec2-user
==>use private key select ec2 instace pem file press ok.
===========================================================================================================================================
login password based 2 servers:
--------------------------------
1)1st create two ec2 instances.
2)connect two terminals in two instances.
3)sudo su

==>server1:(ip=34.215.159.180)(user=sri)
-----------
1)set hostname #hostnamectl set-hostname hosttname(server1)
2)see host name #hostname
3)set the hostname bash level #exec bash
4)create user #useradd sri
5)set user passwd #passwd sri
6)ssh rao@54.218.25.46(public ip) 
  you got error permissions denied go to server2 #vi /etc/ssh/sshd_config open file and change password authentication=yes)
7)enter rao password login server2
8)#vi /etc/ssh/sshd_config (password authentication=yes)
9)#service sshd restart

==>server2:(ip=54.218.25.46)(user=rao)
-----------
1)set hostname #hostnamectl set-hostname hosttname(server2)
2)see host name #hostname
3)set the hostname bash level #exec bash
4)create user #useradd rao
5)set user passwd #passwd rao
6)#vi /etc/ssh/sshd_config (password authentication=yes)
7)#service sshd restart
8)#ssh sri@34.215.159.180
9)enter sri password login server1

<<====================================================================>>

==>PASSWORD LESS AUTHENTICATION:(use key)
--------------------------------
==>server1:(ip=34.215.159.180)(user=sri)
-----------
1)set hostname #hostnamectl set-hostname hostname(server1)
2)see host name #hostname
3)set the hostname bash level #exec bash
4)create user #useradd sri
5)sudo su sri
6)#ssh-keygen (press enter)
7)ls -ltrah (you see.ssh)
8)#cd .ssh
9)#ll
10)see public ip #cat id_rsa.pub 
11)copy public ip
12)#ssh-copy-id rao@54.218.25.46
13)1st time ask password enter user password
14)#ssh rao@54.218.25.46
15)you login server2 like rao user


==>server2:(user=rao ip=54.218.25.46)(user=rao)
-----------
1)set hostname #hostnamectl set-hostname hostname(server2)
2)see host name #hostname
3)set the hostname bash level #exec bash
4)create user #useradd rao
5)#sudo su rao
6)#ls -ltrah
7)#cd .ssh
8)see one file autherized_key s file
9)#cd
10)#ssh-keygen
11)#cd .ssh/
12)#ll
13)#ssh-copy-id sri@34.215.159.180
14)#cd
15)#ssh 34.215.159.180
16)login server1 like sri user

<<========================================================>>
==>in this connect so many user
==>authorized key file permissions =600
==>.ssh file permissions =700
========================================================================================================
process management:
------------------
note:
----
==>services take the library is#cd /etc/init.d
==>systemctl tales in #cd /lib/systemd
==>old versions use service command new versions use systemctl command
==>status show the the process running or stop
==>start a package#service packagename start
==>check package status#service packagename status
==>restart a package#service package.restart 
==>stop a package#service packagename stop
==>package reboot#service packagename reload

=>chkconfig:

==>check services or proces list #chkconfig --list (rhel6)
==>check services list or process list#systemctl list-unit-files
==>package name=httpd
==>enable boot level service#systemctl enable httpd
==>disable boot level service#systemctl disable httpd
==>see service active or not perticular service#systemctl is-active httpd
==>check perticular package#sytemctl is-enabled httpd
==>running process status see#ps
==>active processes is#ps -e
==>process full details see#ps -ef
==>present running process#ps -x
==>see only particular process#ps -ef | grep "packagename"
==>process id= ps -e

==>top command:

-->check load average 1min ,5min ,15min it based on the cpu
-->MiB MWem:see current catch swap ram  
-->backend run process is zombie 
-->pid =process id=every process is uniq id linux 1st process is systemd
-->pr=priority of task
-->ni=nice value highest valu is in -(mineslo vuntadi)
-->virt=vertual memory used by task
-->shr=shared memory
-->s=task status i=idel s=status z=zombi 
-->time+ =cpu consider time
-->it update every 3 sec
-->exit press q
-->press m=print procees id filter
-->M=memory utilization
-->1=how many core cpus see
-->see particular process user see#top -u username
-->z=change colour
-->command full path see#top -c
-->change update time press d and chage ur value
-->p=cpu wise see
-->kill process press k enter poces id
-->print output many times after close automatically#top -n number 
-->print output in one path #top -n 1 > path seave location (ex:/root/rao)

==>aws monitoring tool is cloud watch
==> monitoring tools:
 1)site 24/7
 2)nagious
 3)
==========================================================================================================================
USER ACCESS ONLY LIMITED COMMEDNS & ALL COMMANDS:

==>sudo file:
-------------
==>sudo=super user do
==>when root user files you can edit you need sudo files permission.
==>sudoers file fields is very importent
==>sudoers file any mistakes you do normal users cannot login sudoers file. 
==>normal user ki sudoers permissons aaply process.
-->switch to root user#sudo su
-->#cd
-->add user#useradd rao
-->set password #passwd rao
-->switch to root#su rao
-->cd
-->vi /etc/sudoers (another user also change same time)
-->vi sudo (open only one user)
-->give rao user full permisons
-->go to last
   (ec2-user  ALL=(ALL) NOPASSWD: ALL
    ALL= give all permissions
    ec2-user= user name)
    (rao   ALL=(ALL)    ALL) (password asking every time=nopasswd)
-->su rao
-->cd /etc 
-->touch file (permissons denined)
-->sudo touch file (fiile create)
-->ls -la
-->mkdir hellow (permiison deninied)
-->sudo mkdir hellow (create)
-->df -h
-->sudo du -sch
-->cd
-->exit
===>give only some commands working process
  (grep, tai, cat)
-->check commnd path
-->which grep
-->which tail
-->whichh cat
-->vi sudo
-->/rao (user name press i)
-->( rao  ALL=(ALL)      NOPASSWD: /bin/tail, /bin/tai, /bin/head )
-->esc+:wq
-->su rao
-->#cd
-->#cd /etc
-->#sudo touch rr (you got msg no permiisons to touch)
-->tail vk(u see o/p because give tail permissions)
-->#exit
==>#vi sudo
 ( rao  ALL=(ALL)      NOPASSWD: ALL)
-->#su rao
-->#cd /etc
-->#sudo touch rk (file created)
-->#exit

==>sudo use any file create owner is root
(rao ALL=(ALL) NOPASSWD=:fhejhbc (line 100 mistake fhkjdw))
-->you got msg error 100 line at that time press e for edit next correct 
  any mistake press e (dont press q ,or Q the file correpted)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

==>COPY FILES ONE SERVER TO ANOTHER SERVER:
==>SCP=secure copy command (copy files secure)
==>scp use single server and multi server 
==> 1st set connction password less authention or password based conncertion next fallow bellow steps:
(challa= file name
 sri= server2 user
 rao= server1 user
 23.21.31.169=server2 public ip)

==>SERVER 1:
-->#su rao
-->#cd
-->#touch challa
-->#cp challa /tmp
-->#ll /tmp
-->#scp challa /tmp/challa2(copy and name change challa to challa2) 
-->#scp challa sri@23.21.31.169: (server2 publicip)

==>SERVER 2:
-->#sudo su
-->#su sri
-->#ll

==>SERVER 1:
-->#scp challa sri@23.21.31.169:/tmp 
==>SERVER 2:
-->#ll /tmp

==>SERVER 1:
-->#touch 1 2 3 
-->#scp -v 1 sri@23.21.31.169: (-v= verbose)
-->#scp -v 2 3 sri@23.21.31.169: (copy multiple files)
==>SERVER 2:
-->#ll
-->#mkdir raja

==>SERVER 1:
-->#mkdir kk
-->#mv 1 2 3 kk
-->#ll
-->#scp -r kk sri@23.21.31.169:  (-r =moves directory inside files also)
-->#scp -rvC /ram sri@23.21.31.169:/raja (ram=100gb folder move large file copy use C) 
-->#scp -rvC -l 200 /ram sri@23.21.31.169: ( -l 200 =200 kb set band width)  
-->#scp -rvC -p 22 /ram sri@23.21.31.169: (-p 22 =port number based)
==>SERVER 2:
-->#ll
-->#cd kk

==>SERVER 1:
-->#ll
-->#mkdir kk1
-->#chmod 777 kk1
-->#ll
-->#copy also permissions# scp -rp kk1 sri@23.21.31.169:
==>SERVER 2:
-->#ll




==>SERVER 1:
-->#scp challa sri@23.21.31.169:/opt/file
-->#sudo scp challa sri@23.21.31.169:/tmp/file
==>SERVER 2:
-->#ll


==>rsync =sync data both original file and copy file also 
==>rsync =data transfor very fast
==>scp   =copy files with secure
==>scp file copy time any isssue its stop we do again copy it is continue to starting 
==>rsync file copy time any issue its stop we do again copy its continue new data only alredy data avalible there.

==>rsync:

   -z=compress 
   -r=recurse
   -b=backup
   -h=human readable format output
   -a=archive mode
   -v=verbose

syntax=rsync options sourse location destination location 

==>SERVER 1:
-->#vi r1
-->#rsync -v r1 /tmp
-->#vi /tmp/r1
-->#ll
-->#vi r1 (add data)
-->#rsync -v r1 /tmp/r1 (update data tmp location copy file also )
-->#rsync -av r1 sri@23.21.31.169:



==>SERVER 2:
-->#ll
-->#cat r1

==>SERVER 1:
--># vi r1 (add new data)
-->#rsync -av r1 sri@23.21.31.169:
==>SERVER 2:
-->#ll
-->#cat r1

rsync copy directory also:
==>SERVER 1:
-->#mkdir kk2 
-->#touch 12 13 14
-->#mv 12 13 14 kk2
-->#rsync -av kk2 sri@23.21.31.169:
==>SERVER 2:
-->#ll
-->#cd kk2
-->#ll
-->#cd

see sync time transfer speed:
==>SERVER 1:
-->#touch rr
-->#rsync -av --progress rr sri@23.21.31.169: 
==>SERVER 2:
-->#ll
++++++++++++++++++++
==>server health monitoring is like memory full , cpu utilization see every update is called monitaring.
(see colour based 
 red=down
 green=good
 yellow=warning
 orange= critical
  coloues like ur wish)
(cpu =top -c
disc=du -sch
sevicestatus see =service crond status  (crond=service)

==>chage command use chasi password less authentication age chudavchu 
==>scp or rsync commands run before you do password less authentication.
==>
==>
==========================================================================================================================


packages list link: http://mirror.centos.org/centos/7/os/x86_64/Packages/

1)rpm=redhat package manager
2)wget =this command use before  download in internet link 
3)install wget #yum install wget
 

RPM:
1)download rpm package#wget url (url=open google search rpm package next take link and paste)
2)syntax=wget url
3)ll
4)install rpm with dependence packege package#rpm -ivh http...
5)install rpm without dependece packages#rpm -ivh --nodeps htt...
6)ccheck package install or not #rpm -q package name
7)packge files list #rpm -ql package name
8)see system installed all packages #rpm -qa
9)last install packages list#rpm -qa --last
10)update package #rpm -Uvh package name
11)remove a package #rpm -evm package name
12)remove package without dependence #rpm -ev --nodeps package name
13)check one file package name#rpm -qa filename
14)package details #rpm -qi package name
15)package full information #rpm -V package name

 
 -f =info
 -v= werbose
 -e= remove
 -f= file
 -q= query
 -p= package
 -V= verify

yum:

1)install a package #yum install package name
2)yum install  the dependences automatic
3)install package no ask yes or no #yum install -y package name
4)remove package #yum remove package name
5)update server all package #yum update (do not do if you do take 1st aproval )
6)update single package #yum update package name
7)search a package#yum search package name
8)package information see #yum info package name
9)package information list #yum list package name
10)see system all package#yum list
11)see only install packages#yum list instaled
12)packes updtes avalibule or not#yum check-update
13)update only security packages #yum update --security
14)recent install package list#yum history
15)undo the package #yum undo package name
16)clear cahe #yum lean all
17)clear chache #yum clean package name


==========================================================================================================================
ZIP:
----
1) zip is used for file compression.
2) package install or not see#which zip (or)press #z
3) install zip package #yum install zip
4) single file zip #zip zipname filename  (ex:vi rao ,#zip rr rao)
5) zip multiple files #zip raja filename1 f2 f3 f4 f5
6) zip already zip file add new files #zip -u raja filename1 f2 f3 
7) see zip file content #zipinfo rao (raja =zip file)
8) zip all files current directory #zip ram *
9) after zip source file delete the files store in zip file # zip -m koti *
10) delete file in zip in side file # zip -d rr filename1
11) delete multi files in zip files #zip -d rr f2 f3 f4
12) zip a directory #zip -r sri /etc (/etc=directory)
13) see file size #du -sch filename or directyory name (du -sch sri)
14) multiple files directorys #zip -r sri1 dir1 dir2 dir3
15) zip a directroy in another path #zip -r /vk/vr/rm directoryname

UNZIP:
------
16) see zip file data #unzip -l sri
17) see zip file full details #unzip -z sri
18) unzip(like extract) a zip file #unzip sri
19) unzip a zip file in different path #unzip sri1 -d /root/latha/pilla
20) unzip a single file #unzip sri filename (sri zip file have 10 files we unzip one file)
21) exculed(we dont need all) some files #unzip  sri -x f3 f6 f7 (f3 f6 f7 are not unzip)
22) don't show unzip processing pr #unzip -q sri

==========================================================================================================================
TAR:

 -c=create
 -v=verbose
 -f= specific
 -t=list
 -r=append
 -x=extract
 -z =zip
1) Create tar file #tar -cvf traffilename filename (#tar -cvf rao.tar /etc)
2) To see tar file data #tar -tvf rao.tar 
3) Extract a tar file or directory #tar -xvf rao.tar
4) Extract file in different path #tar -xvf rao.tar /root/sri
5) Extract only some files  #
6) Tar file compress more a file #tar -zcvf rao.tar.gz /etc
7) Extract files #tar -zxvf rao.tar.gz

SERVICE NOW TOOL:
1)sla=service level aggrement
2)ola=operational level aggrement

1)what is service now?
   
   service now is a software platform that supports IT service managements like procesing customer service requests.
USAGE: you can raise requests that deal with incidents,problems,changes which named as below
 1)incident ticket(inc)
 -->incident task itask
 2)problem ticket(prb)
 -->problem task itask
 3)change ticket (chg)
 -->change task

==>incidents:
platform1-->critical-->2hours
platform2-->high-->4hours
platform3-->mediam-->8hours
platform4-->low-->24hours

sla service level agreement= 15 min

==>level of support:
1)L1=any issue 1st check L1 support
2)L2= L1 can not slove issue next check L2 team
3)L3= L1&L2 cant slove the issue check L3 team fix the code check and slove.

==========================================================================================================================
DISK MANAGEMENT:

1) To see mount points #df -h
2) Desk informatio store in /dev to see #ll /dev
3) System attached disks see#lsblk
4) check the data in disk #file -s partion name (output=data there is no data)
5) RheL7.0 default file system =xfs 
6) Write file system #mkfs.ext4 /dev/xvdf
7) Temprory Mount a partion when u mount 1st create a directory #mkdir sri# mount /dev/xvdf sri
8) Permenent mount #vi /etc/fstab
    (UUID=ID (OR) /dev/xvdf  sri  ext4  defaults  0  2)
9) to see disk uuid #blkid or #lsblk -d -fs
10) uuid=universal uniqe id
11) un mount file system #umount sri (and remove fstab entry also)

<<=========================>>

LVM:
1) create physical volume #pvcreate /dev/xvdf 
2) see physical volume details  #pvdisplay (or) #pvs
3) create volume group #vgcreate groupname(sri2) /dev/xvdf
4) see volume group #vgs (or)#vgdisplay
5) create logical volume #lvcreate -n rao1(lv name) -L 10G (size) sri1(vg group name) 
6) to see logical volume #lvdisplay 
7) mount the lvm (need directory #mkdir sri2) #mount /dev/sri1/rao1 sri2 (not work use below 2 steps)
8)  #mkfs.ext4 /dev/mapper/rao1
9) mount the lvm #mount /dev/mapper/rao1 sri2
10) to see file system type #df -Th
11) perment mount lvm #vi /etc/fstab
  (/dev/mapoper/rao1  sri1  ext4 defaults 0 0)
12) resize phisical valume #pv resize
13) resize volume group #vg resize
14) lvextend -L +30G /dev/mapper/rao1
15) ext4 resize filesystem #resize2fs -L 25G /dev/mapper/rao1
16) xfs resize #xfs growfs 
17) unmount lvm (lvm reduce time take down time) #umount /sri2
18) resize lvm #resize2fs /dev/mapper/rao1
        #lvreduce -L 25G /dev/mapper/rao1
19)

<<<=================================>>

fstab fields:
1)paertion name or uuid (/dev/xvdf)
2)mount point (sri )
3)filesystem type (ext4)
4)mount option (defaults)
5)dump value (0 or 1 or 2)
6)fsck value (0 or 1 or 2) (0=skip, 1=root value,2=externalvolues add use 2)

<<<======================================>>>

==>add secondary volume in ec2 inatance:
1) Start instance
2) Elastic block store
3) Volume
4) Create volume
5) Select size ,jone select as ec2 zone same
6) Create volume
7) Give volume name
8) Select volume
9) Actions
10) Attach volume
11) Select ur instance
12) Attach valume completed.you can use it mount next write data

==========================================================================================================================
			     linux commands:
			--------------------------
1)/ ->root or parent directory
2)pwd ->it displays present working directory
3)/root	-->Is the default home directory for user root
4)cd ->to change the directory
			
creation of files:
-----------------------
->we can create files in three ways..1)cat  2)touch  3)vi

touch :-it is used to create empty files.
------
->we can't append data into files by using touch command

syntax:touch filename

ex:
----
1)creation of single file:
---------------------------
-> touch aws  (here aws is the file name)

how to check whether file is created or not:
---------------------------------------------
ls:it list current directory all files and sub directories
->ls 

ll:it list the files and directories in long format
->ll

2)creation of multiple files:
-----------------------------
->touch file1 file2 file3
->ls

cat:- it is used to create new files or to open existing files or to append data to the existing files.
-----
syntax:cat > filename

how to save data into file :
-----------------------------
ctrl d

how to crate a file by using cat command:
-------------------------------------------
1)cat > sample  (here sample is the file name)
  linux is an operating system
  it is easy
2)ctrl d (to save the content in a file)

How to view the content in the file:
-----------------------------------------
cat  sample (cat  filename)

How to add content already existing file:
---------------------------------------------
cat >> sample (here sample is already existing file and some content is there)

linux mostly used in portble devices
current version is 3.10

ctrl d

cat sample


How to redirect the content from one file to another file:
------------------------------------------------------------

cat > linux
hi good morning

ctrl d

cat sample > linux (here the content of sample redirect to linux)

How to see the content more than one files at a time:
-----------------------------------------------------
cat sample linux

Deleting Files:
----------------
rm:- this command is used to delete a file
syntax: rm filename

->whenver you are using rm command to delete a file it is asking a permission
->then you just type 'y'
->then the file is removed

ex: rm aws
->rm: remove regular empty file 'aws' ? y
->file is deleted

I don't need ask a permission to delete a file:
------------------------------------------------
-> rm  -rf linux   (file is deleted without asking permission)

How to delete a multiple files at a time:
------------------------------------------
->  rm  -rf file1  file2  file3
-------------------------------------------------
1)nested directory creation = mkdir -p rao/Venkat/challa
2) check directory usage= du -h
3) check memory = free -m
4) disc usage check = df -h
5)crate soft link #ln -s file-name link-name  (#ln -s Venkat challa )
6) crate hard link #ln file-name link-name  (#ln Venkat challa )
7) 
----------------------------------------------------------

creation of directories:
-------------------------
->mkdir: this command is used to create a new directory
syntax: mkdir dirname

ex: mkdir abc

How to change a directory:
-------------------------
->  cd  abc
->mkdir aws

NOTE:
-----
# cd			--to come out the directory

# cd ../..		--to change two directories back

# cd ../../..		--to change three directories back

# cd (enter)		--to goto the user home directory

# cd /			--to goto the / directory 

How to create multiple directories at a single time:
-----------------------------------------------------
-> mkdir abc   def   ghi   jkl

Removing directories:
----------------------
rmdir: to remove a directory but directory must be empty

ex: rmdir abc

ex1:i craeted abc directory in my root
cd abc (abc directory change to root)
under abc directory i created mkdir xyz (i created xyz under abc directory)
cd (i come out abc directory)

how to delete abc directory:
------------------------------
rm  -rf abc


Copying a files:
----------------
cp: this command is used to copy a files

syntax: cp  source file   target file

->source file must be existing file and target file may be new file or may be a existing file.

NOTE:
------
1)Any path starts from ("/") root directory known as Absolute path.
2)If path not started with ("/") root directory known as Relative path.

ex:-
-----
1) cp notepad  notepad1  (here not is al existing file and notepad1 is the new file)

2)cp -r abc d1    (here abc directory copied into d1 directory)

3)cp f1 f2  d2   (here f1 , f2  files copied into d2 directory)


Moving files or Rename a files:
------------------------------------
mv: to rename a file / directory (or) to move a file / directory

ex: 
1)mv file1  file2  (here file1 is renamed by file2)
2)mv  dir1  dir2   (here dir1 is renamed by dir2)


some commands:
---------------

1)ls -l filename  (this command used to see the particular file)

2)ls -Q  (this command used to make the all files in quatations)

3)ls -r  (this command used to reverse the files)

4)ls - R (it list all files Recursively)

5)ls -t (it list all files based on date and time of creation)

6)ls -i (it display the inode numbers)

7)ls -sh  (to display the file size)

8)whoami  (it display the switched user name or child user name)

9)exit    (to logout from current user account)

10)man commandname  (it displays help pages of given command)

11)clear   (to clear the screen)

12)cal   (it displays current month calender)

13)date  (it displays system date and time)

14)uname  (it displays operating system name)

15)uname -r  (it displays kernel version)

16)hostname   (it displays server name)

17)hostname -i (it displays server IP address)

18)history  (it displays previously executed commands list)

19)ls -ltrah  (to display last modified files)

Creating Hidden files:
------------------------
->Any filename or directory name  start with "." character is called hidden files

how to create hidden files:
-----------------------------

cat > .filename

ctrl d

how see hidden files:
---------------------
ls -a

ls -l f* (it displays all files with start 'm' character)

WORKING WITH VI-EDITOR :
--------------------------
-> vi is visual editor

->it is used for to create new files ,to open files or to modify existing files

->it has 3 modes

    1)command modes  
	2)input or insert modes
	3)Ex command mode
	
->The default mode is command mode
->vi is the command to open vi editor

How to create a file:
---------------------

->  vi  filename

modes:
--------

1)Esc i  (it is the insert mode to write the data)

2)Esc :se nu (to set the line numbers in the file)

3)Esc :se nonu (to remove the line numbers)

4)Esc :wq!  (to save the file and quit)

5)Esc :q!  (quit without save if the file is modified or updated)

6)Esc o  (to add the line below the cursor)

7)Esc  O (to add the line above the cursor)

8)Esc G (move the cursor file line to last line)

9)Esc gg  (move the cursor last line to first line)

10)Esc yy  (to copy the line)

11)Esc p  (to paste the line)

12)Esc dd  (to delete the line)

13)Esc dw  (to delete the word)

14)Esc x  (to delete a character)

15)Esc A  (to move the cursor end of the line)

16)Esc W  (move the cursor word by word)

17)Esc yw  (to copy the word)

How to open multiple files at a time:
-----------------------------------------
vi  -o  filename  filename

==========================================================================================================================
1) your file dont delete any one apply cahttr command
ex:
touch varam
ll
chattr +i varam
rm -f varam (varam file not delete root also)
if you want delete a file apply
chattr -i varam
rm -f varam (now delete a file)
++++++++++++++++++++++++++++++++++++++++++++++++
2) ssh port number 22
if you dont find ip set ip
 1) go to vm ware
 2)settings
 3)network
 4)adaptor 1
 5)change ntf to n/w host adaptor
 6)open terminal 
   #su -
   #ifup enp0s3
   #ifconfig
  7)you find ip in beside inet

to see ip address:
#ip addr
#ip a
#ifconfig

+++++++++++++++++++++++++++++++++++++++++++++++++++
file creation;
#touch
#cat
#nano
#vi
delete files:
#rm
directories create:
#mkdir
delete directories:
#rmdir
#rm -r
+++++++++++++++++++++++++++++++
find files and directories:
#locate  (locate filename/directories =you dont get output use#updatedb)
#find (find path -name filename)
+++++++++++++++++++++++++++++++++++
1)multi users add at a time in a group #gpasswd -M user1,user2,user3 gropname

2)to see users list in a group #lid -g groupname

3)add only one user in group #gpasswd -a username groupname

multi users set password at a time:
----------------------------------
  #useradd rao
  #useradd sri
  #touch baby
  #vi baby
 (rao=12345
  sri=12345)
 #cat baby | chpasswd
 #cat /etc/gshadow
---------------------------------------
alias :
ex:#alias cls=clear
note:Aliases defined on the command line will die with the terminal window.
When you close it, they are gone.
To make your aliases always be available to you, 
add them to the.bash_aliases file in your home directory.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CD:
note:
The cd command changes your current directory. 
In other words,it moves you to a new place in the filesystem.

==>note:
If you are changing to a directory that is within your current directory, 
you can simply type cd and the name of the other directory.

ex:#cd work

==>note:
If you are changing to a directory elsewhere within the filesystem directory tree,
 provide the path to the directory with a leading /.
ex:#cd /usr/local/bin
==>note:
To quickly return to your home directory, 
use the ~ (tilde) character as the directory name.
ex:#cd ~
==>note:
Here’s another trick: You can use the double dot symbol .. to represent the parent of the current directory.
 You can type the following command to go up a directory:
ex:#cd ..

==>note:
Imagine you are in a directory. 
The parent directory has other directories in it,
 as well as the directory you’re currently in.
 To change into one of those other directories,
 you can use the .. symbol to shorten what you have to type.

ex:#cd ../games
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
==========================================================================================================================
password autentication:(to connect server1 to server 2 with password)

serverA          						|	serverB

1                    						|	   2
	
server1:sudo passwd ec2-user    		   		|     serverb:sudo passwd ec2-user
sudo vi /etc/ssh/sshd_config          	   	   		|     sudo vi   /etc/ssh/sshd_config
sudo service sshd restart                	     		|     sudo service sshd restart

ssh(secure shell)
remote server:To communicate one server to another server

ssh ec2-user@3.238.66.144(server2 ip)         
yes
(ask password) 
Password leass authetication:

sudo useradd ravi                                		|	sudo useradd ravi1
sudo passwd ravi                                		|	sudo passwd ravi1
sudo su ravi                                              	|	sudo su ravi1
cd                                                       	|       cd

Keypairs:
public encrypted format-----internet access
private decrypted format----internet access-no----nat gate way
ravi:ssh-keygen 
enter
enter
cd .ssh/                                			|      cd .ssh/
ll(id_rsa(private key)                 				|      ll
cat id_rsa.hub                          			|      cat authorized_keys
ssh-copy-id ravi@ipname(server2)
yes
password
@ravi:ssh ravi1@ipname

==========================================================================================================================
telnet serer configuration:
  server:

1)login terminal
2)login as root
3)install telnet= yum install telnet-server
4)service xinetd status
5)service xinetd start
6)vim /etc/xinetd.d/telnet
   (disable=no)
7)service xinetd status
8)service xinetd restart
9)ifconfig

client:

 same staps above and next
  #telnet server ip

==========================================================================================================================

shell - shell is nothing but cammand sector

kernel- kernel is heart of operating system, it is bridging between hardware and software
        VM linuz- name, 
	kernel version- 3.10 version 


lunches instance:-



file creation
  touch
  cat 
  vi

whate are the fileds in LL:-Long Listing Formate

-rw-rw-r-- :- Permissions
1 	   :- symbolic link
ec2-user ;- owner 
ec2-user :- group
0;- file size
dec 4:- modified date & time
apple ;- file name


Vi Modes

cammand mode
Insert mode:-
Exetended Mode:-


esc i;-Insert mode
:se nu  :-to display seriol numbers
:se nonu :-to clear seriol numbers
g :- to go first line
G :- to go last line
:wq! ;-to save & quit in VI Editor
esc yy:- copy
esc p;- paste
esc dd :-dealte
esc o ;- to creat below line
esc O ;-to creat abhove line




rm file name ;to remove file 
rm -rf file name :- to remove file recurcev forcefullu

mkdir :- making directory 
============================================================================================================================================================
1) permissions in Linux:
------------------------
--> to see Linux file and directory permissions cmd #ls -l
-> the default file permissions = 644
--> default directory permissions = 755
--> the permissions is 3 sets 1) owner 2) group 3) other
--> file permissions apply in 2 ways one is symbolic and numerical
symbolic:
--------
--> user =u=rw- (r= read, w= write, x= execute)
--> group=g=r--
--> other=o=r--
numerical:
---------
--> read= 4
--> write =2
--> execute =1
--------------------
0= no permissions
1= execute
2= write
3= write + execute
4= read
5= read + execute
6= read + write
7= read + write + execute
=============================
In the permission value 744, the first digit corresponds to the user, the second digit to the group, and the third digit to others. By adding up the value of each user classification, you can find the file permissions.
Owner: rwx = 4+2+1 = 7
Group: r-- = 4+0+0 = 4
Others: r-- = 4+0+0 = 4
examples:
---------
 $chmod ug+rwx example.txt
 $ chmod o+r example2.txt
 $chmod 644 rao.txt
-------------------------------
==> SUID is the special permission for the user access level and always executes as the user who owns the file, no matter who is passing the command.
#chmod u+s Venkat.txt (apply suid)

==> SGID allows a file to be executed as the group owner of the file; a file created in the directory has its group ownership set to the directory owner. This is helpful for directories used collaboratively among different members of a group because all members can access and execute new files.
#chmod g+s Venkat.txt (apply sgid)

==> The "sticky bit" is a directory-level special permission that restricts file deletion, meaning only the file owner can remove a file within the directory.
#chmod o+t Venkat.txt
============================================================================================================================================================
2) networking cmds in Linux:
----------------------------
==> #ifconfig or #ip addr  : to check ip address and subnet mask we use this cmd. 
==> #ifconfig eth0 down  : to disable a network interface.
==> #ping  : used to test reachable network host ex: #ping google.com 
==> #netstat : Displays network connections, routing tables, interface statistics (netstat = ss(socket stat = both same use)
           ex: #netstat -a (to display all network connections)
           ex: #netstat -1 (to list  ports)
           ex: #netstat -tulnp (Show detailed output including process IDs)
==> #nslookup (or) #dig : Used to query DNS servers and obtain domain name or IP address information
     #nslookup google.com
     #dig google.com MX
==> #hostnmae : to check host name and set host name
        ex: #hostname ( to check host name)
        ex: #hostnamectl set-hostname venkat (set host name to apply next use #bash exec)
==> #curl : A versatile tool for transferring data from or to a server, often used for testing URLs or API requests.
        ex: #curl -O http://example.com/file.zip (download file)
        ex: #curl http://example.com    (fetch the content of webpage)
==> #wget: A tool for downloading files from the web via HTTP, HTTPS, or FTP.
        ex: wget http://example.com/file.zip
==> #iptables : Used for configuring the Linux kernel's firewall to manage incoming and outgoing network traffic.
     #sudo iptables -L  (Display current firewall rules)
     #sudo iptables -A INPUT -p tcp --dport 80 -j REJECT  (Block incoming traffic on port 80)
     #sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT   (Allow incoming traffic on port 22 (SSH))
==> #nmcli (Network Manager Command Line Interface):  Used to interact with Network Manager, allowing for network configuration and management via the command line.
     #nmcli device status  (Display network status)
     #nmcli dev wifi connect "SSID" password "password"    (Connect to a Wi-Fi network)
==> #tcpdump : A powerful packet analyzer that allows you to capture and inspect network traffic in real-time.
      #sudo tcpdump -i eth0  (Capture packets on a specific interface (e.g., eth0))
============================================================================================================================================================



3) how to resolve port confit
==> what is port conflict:
-------------------------- 
      First, determine which port is causing the conflict. Port conflicts usually happen when two different processes or applications attempt to use the same port.

1. Check for Port Usage:
------------------------
Using ss (Socket Stat):  #ss -tuln | grep :PORT
Replace PORT with the port number you're investigating (e.g., 80, 443).
Example to check if port 80 is in use: #ss -tuln | grep :80
Using netstat: #netstat -tuln | grep :PORT
Using lsof (List Open Files): #lsof -i :PORT
Example to check port 80: #lsof -i :80

Step 2: Identify the Conflicting Processes:
-------------------------------------------
      Once you have found the process using the port, you can check more details about the conflicting process.
 Using ps (Process Status): You can find the details of a process by its PID (Process ID). For example, if the PID is 1234:
#ps -fp 1234   (This will show which program or service is using the port.)

Step 3: Resolve the Conflict:
-----------------------------
There are a few ways to resolve the port conflict once you've identified the conflicting processes.

1. Stop the Conflicting Process
  If a process is unnecessarily using a port that you need for another application, you can stop it.

Using kill to stop the process:   #kill -9 <PID>   (Replace <PID> with the Process ID of the conflicting application.)

If the process is a service, you can stop it using systemctl (if it's managed by systemd):
#sudo systemctl stop <service_name>

2. Change the Port of the Conflicting Application:
     If stopping the conflicting process is not an option (e.g., it's a critical system service), you can modify the application's configuration to use a different port.

Example 1: Change Apache Web Server Port
     If you have a web server like Apache using port 80, and you need to resolve a conflict, you can change the port in the configuration file.

  ==> Edit Apache's configuration file:
  #sudo nano /etc/apache2/ports.conf  (here Change the Listen directive to a different port (e.g., 8080): Listen 8080)

Then, update any virtual host configuration files to reflect the new port:
   #sudo nano /etc/apache2/sites-available/000-default.conf
 ==> Restart Apache to apply changes:
    #sudo systemctl restart apache2

Example 2: Change MySQL Port
To change the port for MySQL, you would:

Edit the MySQL configuration file:  #sudo nano /etc/mysql/my.cnf
Find and change the port under the [mysqld] section:
port = 3307
Restart MySQL: #sudo systemctl restart MySQL

3. Check for Other Services Using the Same Port
   If you suspect multiple services are trying to use the same port (e.g., two web servers), you may need to reconfigure one of them to use a different port as explained in the previous step.

Step 4: Verify the Conflict is Resolved
After stopping the conflicting process or changing the port, verify that the port is no longer in use.

Check port usage again with ss or netstat: #ss -tuln | grep :PORT  (If you don't see any output, it means the port is free and the conflict is resolved.)
=====================================================================================================================================
4) docker internal /external networking:
----------------------------------------

1. Internal Docker Networking
     Internal networking focuses on communication between containers within the Docker environment without exposing the containers to the external network.
Networking Models for Internal Communication
a) Bridge Network (Default Docker Network)
Description: When containers are launched without specifying a custom network, they are connected to the default bridge network.
Characteristics:
Containers can communicate with each other using IP addresses or container names within the same bridge network.
By default, they are isolated from external networks unless ports are explicitly published.
Use Cases: Ideal for small-scale, single-host deployments where containers need to communicate privately.
b) Custom Bridge Network
Description: A user-defined bridge network provides better container discoverability.
Advantages:
Containers can reference each other by name (Docker automatically manages DNS within the custom network).
Greater flexibility and isolation compared to the default bridge network.
Use Cases: Recommended for applications with multiple interconnected containers (e.g., microservices).
c) None Network
Description: A container with --network none does not get a network interface. It cannot communicate with other containers or external systems.
Use Cases: For security-focused applications or containers where networking isn't needed.
d) Host Network
Description: The container shares the host's network stack. The container uses the host's IP address and port space. No NAT (Network Address Translation) is performed.
Use Cases: High-performance scenarios where network latency or overhead should be minimized.

e) Overlay Network:
-------------------
Description: Used for multi-host networking. Containers on different Docker hosts can communicate as if on the same network. Overlay networks are typically used with Docker Swarm or Kubernetes. Data is encrypted when transmitted between hosts. Use Cases: Distributed applications, multi-node Docker Swarm setups.

2. External Docker Networking:
------------------------------
External networking allows containers to communicate with systems outside the Docker environment (e.g., the internet or a local network).

Networking Models for External Communication
a) Port Mapping:
----------------
         External access to containers is achieved by mapping container ports to host ports. For example, docker run -p 8080:80 nginx maps the container’s port 80 to the host’s port 8080.
Mechanism: Docker uses NAT to route external traffic from the host to the container.
Use Cases: Running web servers, APIs, or any application that requires external accessibility.
b) Publishing Ports:
-------------------
Description: Using the --publish flag, specific ports on the host are bound to container ports. This works for individual containers or Docker Compose setups.
Example:
In Docker Compose:
services:
  web:
    image: nginx
    ports:
      - "8080:80"
Use Cases: Making containerized services available to external users or systems.
c) Direct Networking via Host
If a container uses the host network, it directly communicates with external networks without port mapping. For example:
A web server running on port 80 inside the container is directly accessible on the host’s port 80.
d) DNS and External Name Resolution
Docker integrates with external DNS servers to resolve hostnames outside the container.
Containers can access external services by DNS (e.g., google.com).
e) Network Plugins
Docker supports third-party plugins to integrate with external networks.
Plugins can enable advanced networking features such as:
Software-defined networking (e.g., Weave Net, Calico).
Integration with cloud providers' VPCs.
Internal vs External Networking: Key Differences
Feature	Internal Networking	External Networking
Visibility	Restricted to containers within the Docker network	Accessible from outside the Docker environment
Setup	Managed through bridge or overlay networks	Requires port mapping or host network
Security	Offers isolation by default	Exposes services, potentially increasing risk
Use Cases	Inter-container communication (e.g., microservices)	Making containerized apps accessible externally
Detailed Workflow Example
Scenario: A Web App with Internal and External Networking
Architecture:
Backend: Runs a Python Flask app (app).
Frontend: Runs an Nginx server (web).
Database: MySQL (db).
All components are deployed as containers.
Steps:
Create an Internal Network:

Use a custom bridge network for internal communication:
docker network create app_network
Connect Containers:

Run the backend and database containers on the custom network:
docker run --network app_network --name db mysql
docker run --network app_network --name app flask-app
Expose the Frontend:

Publish the frontend service to make it accessible externally:
docker run --network app_network --name web -p 8080:80 nginx
Interconnectivity:

Backend (app) communicates with the database (db) using internal networking.
External users access the frontend (web) via http://<host-ip>:8080.
Networking Troubleshooting Tips
Check Networks:

List all Docker networks:
docker network ls
Inspect a Network: Get details of a specific network:
   #docker network inspect <network_name>
Connectivity Issues:

Use docker exec to test connectivity between containers (e.g., using ping or curl).
Firewall Rules:

Ensure host firewalls allow traffic to published ports.
Logs:

Check container logs for potential errors:
docker logs <container_name>

============================================================================================================================================================
5) basic n/w ip range / class:


1. What is an IP Address?
    An IP address (Internet Protocol address) is a numerical label assigned to each device connected to a network. It identifies both the network and the host (device).

Format:
------
IPv4: 192.168.1.1 (32-bit, written in dotted-decimal format).
IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 (128-bit, written in hexadecimal).

2. IPv4 Address Classes
IPv4 addresses are divided into five classes (A to E), based on the first few bits. Classes A, B, and C are commonly used for networks.

Class	Range (First Octet)     	Default Subnet Mask	Purpose	                       Network Size
A	0.0.0.0   – 127.255.255.255	255.0.0.0	         Large networks        	        Supports ~16 million hosts
B	128.0.0.0 – 191.255.255.255	255.255.0.0	         Medium-sized networks	        Supports ~65,000 hosts
C	192.0.0.0 – 223.255.255.255	255.255.255.0          	 Small networks	                Supports 254 hosts
D	224.0.0.0 – 239.255.255.255	N/A          	         Multicasting	                Not for standard network use
E	240.0.0.0 – 255.255.255.255	N/A	                 Reserved for future use or R&D	Experimental use only

3. Private IP Address Ranges
Private IP ranges are reserved for internal use within networks and are not routable on the public internet.

Class	Private IP Range	            Example Subnet Mask
A	10.0.0.0 – 10.255.255.255	    255.0.0.0
B	172.16.0.0 – 172.31.255.255	    255.240.0.0
C	192.168.0.0 – 192.168.255.255	    255.255.0.0
These ranges are used for LANs (Local Area Networks) and NAT (Network Address Translation).

4. Subnet Mask
A subnet mask defines how the IP address is divided into network and host parts. Common subnet masks:

255.0.0.0 (Class A)
255.255.0.0 (Class B)
255.255.255.0 (Class C)

5. Special IP Addresses
127.0.0.1: Loopback address (used to test local network interfaces).
0.0.0.0: Represents all available IPs on a network.
255.255.255.255: Broadcast address (sends data to all devices in a network).
APIPA Range (169.254.0.0 – 169.254.255.255): Used for automatic private IP addressing when no DHCP server is available.
6. CIDR Notation (Classless Inter-Domain Routing)
CIDR is a way to define IP ranges more flexibly than traditional classes. It uses a suffix to indicate the number of network bits.

Example:
192.168.1.0/24 → 24 bits for the network, 8 bits for hosts.
10.0.0.0/8 → 8 bits for the network, 24 bits for hosts.
7. Summary Table
Class	     IP Range	                Private IP Range	        Default Mask        Hosts/Network
A	0.0.0.0 – 127.255.255.255	10.0.0.0 – 10.255.255.255	255.0.0.0	    ~16 million
B	128.0.0.0 – 191.255.255.255	172.16.0.0 – 172.31.255.255	255.255.0.0	    ~65,000
C	192.0.0.0 – 223.255.255.255	192.168.0.0 – 192.168.255.255	255.255.255.0	     254
D	224.0.0.0 – 239.255.255.255	N/A	                           N/A	            Multicasting
E	240.0.0.0 – 255.255.255.255	N/A	                           N/A         	    Experimental (reserved)
Let me know if you'd like details on IPv6 ranges!
============================================================================================================================================================
1) FTP = 20 and 21
2) SCP =
3) SFTP=
4) RCP =
5) SSH = 22
6) NFS = 
7) mysql= 3306
8) rdp =
9) nexus =
10) nginx/httpd =80

==============================================================================================================================================================> react js application build and deploy using git actions and use ports ssh scp sftp  

react js GitHub link = https://github.com/adrianhajdin/project_video_chat

links: https://cloudgurupayments.medium.com/deploy-react-app-to-aws-ec2-using-github-actions-9565ad16e9c0

==========================================================================================================================
